// Code generated by go-bindata.
// sources:
// template/method.tmpl
// template/struct.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMethodTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x41\x73\xda\x3a\x10\x3e\xe3\x5f\xb1\x61\xde\xbc\x67\x5e\xa8\x33\x3d\xf4\xd0\xcc\x70\x48\xc1\x69\x99\x52\x3b\x01\xd3\xe6\x96\x08\xbc\x04\x4f\x8d\x44\x24\x41\xc2\x30\xfc\xf7\x4a\xc8\x38\x26\x18\xe2\x50\x92\x5e\x7a\xc1\x13\x67\xf7\xd3\xb7\xd2\x7e\xdf\xca\xf3\x39\x44\x03\x70\x2e\x78\x34\x22\x7c\xf6\x15\x67\xb0\x58\x58\x27\x27\xe0\x3e\x44\x42\x0a\x08\x51\x22\x1f\x45\x14\x85\x0e\x93\x43\x04\x95\xe0\x78\x64\x84\x2a\x0e\xd0\x04\x45\x74\xf9\x9f\x90\x48\xd2\x23\x02\x1d\x6b\x30\xa1\x7d\xb0\x55\xa4\x18\x32\x2e\xa9\x8e\x4e\x73\xfe\xcf\x00\x54\x92\x65\xec\x0a\xf4\x18\x8b\x61\x6e\x95\x38\xca\x09\xa7\x90\x9b\xeb\x5c\x9b\x05\xad\x85\xa5\x29\x36\x30\x56\xec\x42\x18\x73\x36\x8d\x42\xcd\x90\x0e\x18\x1f\x11\x19\x31\x9a\xc7\x76\x48\x04\xf4\x10\xa9\x2a\xca\x24\x0e\x38\x1b\xed\xcd\x3c\x59\xbd\x30\xf5\x64\xd1\x84\x7b\x93\x0a\xe4\x52\x31\xd6\x0f\xb1\x41\x55\xb2\xbd\x79\x19\x64\x3b\xec\xc1\x95\xdf\xf8\x54\x01\xe4\x9c\x71\x4d\x6f\x4a\xb8\xfe\xc3\xbc\xb0\xac\x92\x62\xa1\x36\x89\xc4\x1c\x49\x38\x33\x47\x59\x85\x1e\x89\x62\xab\xa4\xde\xef\x3c\x00\x0d\xb7\x2a\x77\x09\x27\x1c\x0f\xef\xed\xb2\x29\x07\x06\x0a\x04\xc3\xd3\x75\x6c\x51\xae\x58\xa5\x85\x59\x57\xdc\xc5\x70\x37\x41\x3e\xb3\x4a\x7d\x46\x85\xd4\x2f\x84\xe4\x50\x83\x9b\xa6\xd7\x71\xdb\x01\x34\xbd\xc0\x5f\x72\xe8\x0f\x71\x44\xc0\xe9\x24\xcf\x80\xf4\x62\x34\xbf\xab\xf2\xed\x1b\x38\x56\x74\x6e\x54\x74\x9f\xc5\x9a\xaf\x00\xe7\x3c\xc2\x38\x14\xd9\xbe\x5e\xd5\x90\x44\x57\xe0\xfb\x59\xab\xeb\x76\x9e\xa4\x4f\x49\x5c\x2c\xbb\xed\x06\xdd\xb6\xd7\xf4\x3e\xc3\xe3\xba\x6b\x09\x75\xd5\x14\x2a\xde\x14\xcc\x27\x74\x55\xf0\x95\xdf\x62\xb7\xb6\x29\xb8\xaa\x93\x07\x7a\xb1\x75\xda\xf6\x93\xad\xaf\xe4\x51\x51\xdb\xa9\x8f\xb3\x06\x61\xcf\xb9\xd4\xd8\x6d\x76\x7f\x10\x5c\xb5\xd9\x84\xda\xff\xe6\x77\x80\xee\xb5\x5c\x2e\xaa\x67\x34\x9d\xa3\x1a\xd0\x28\x7e\xd2\x20\x8f\x07\x8f\xd2\x74\x03\xd2\x3e\x5a\xa5\xdd\x4d\x56\x03\xc9\x27\x68\xa5\xc2\x52\xb8\x89\x7a\xba\x63\xa5\x0c\x84\xc9\xf2\xb1\xa9\x9e\xdf\xf0\x23\x83\x5c\x58\x3d\x21\x43\x41\xff\x93\x1b\xea\x39\xda\x4b\x3e\xa6\x9e\x54\x3e\x1a\x1c\x28\x4b\xd0\x33\xf2\xd1\x0b\x1b\x37\x79\x5e\xb0\x2b\xaf\x2b\xb6\xa4\x3a\xd6\x9f\xda\x18\x55\xcd\xcb\x44\xe5\xa4\xc5\x64\xdb\xbd\x68\x9c\x05\x6e\x41\xc5\x76\xdc\x60\x6f\xd5\xd6\xc0\x86\xfd\x14\xfb\xe3\x8b\xdb\x76\x77\xab\x55\xa1\xff\x63\x02\xfa\x6c\x42\xe5\x4e\xd8\xd7\x13\x76\x75\xcb\x59\x6e\x95\xde\x75\x15\x52\x27\x70\x1f\xb0\xff\x47\x48\x64\xd4\x6e\x44\xda\x21\x53\x04\xa1\x7e\x0e\x3a\xde\x34\x6a\x8e\x3c\xb7\x0a\x20\xbd\x60\x64\x04\x90\x1f\x99\x4a\x3f\x69\xf8\x9d\xc1\xe9\x94\xad\xa4\x96\xb4\x1c\x7d\x63\xe4\xfa\x0e\x22\x80\x50\x65\x4f\x66\x1a\x6a\x86\x8f\x25\x38\x2a\x5a\x27\x78\x7e\xe0\x9e\xc2\x05\x13\xf2\x96\x63\xe7\xb2\x05\x1f\x9d\x0f\xc7\xc0\x68\x3c\x7b\x91\x5d\xfd\x1d\xf6\x69\x5f\xbf\x68\xb6\x67\x82\x7d\x0f\xea\xbe\x77\xde\x6a\xd6\x83\xe5\xae\x6f\xf7\x07\x75\xeb\xf3\x21\xb1\xba\xe7\x4c\x6c\xdd\xb3\xd6\x02\xc7\x1c\x07\xd1\xc3\x7a\x78\xd9\xbd\xaa\xb7\xba\x0d\xb7\x51\xce\x64\x1e\xca\x64\x0e\xe3\x12\x6f\x3e\xe6\xcd\x15\x3b\x99\x75\x9b\x2e\x72\x80\xeb\xfb\x1b\x0e\x7a\x5d\xd6\x81\x06\x78\x16\x6a\x87\xba\x1a\x6e\xcb\x55\x8d\x7a\xde\xf6\xbf\x15\x54\x57\xc1\x11\xf9\xbe\x40\x5f\x1e\x6a\x7e\xbd\xca\x15\x74\xf5\x2d\xb6\xad\x33\x57\x7b\x9e\xdf\x9a\xf3\xf9\x3b\x40\x1a\xea\x0f\x65\xeb\x57\x00\x00\x00\xff\xff\x97\x7b\xf4\xff\x3f\x0f\x00\x00")

func templateMethodTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMethodTmpl,
		"template/method.tmpl",
	)
}

func templateMethodTmpl() (*asset, error) {
	bytes, err := templateMethodTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/method.tmpl", size: 3903, mode: os.FileMode(420), modTime: time.Unix(1468648230, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\x55\x28\x4a\x2d\x28\x4a\x2d\x4e\xcd\x2b\x29\x06\x0b\x07\x27\x67\xa4\xe6\x26\x02\x25\xf4\x40\xbc\x90\xc4\xa4\x9c\x54\xa8\x4a\xae\x92\xca\x82\x54\x14\xad\xc5\x25\x45\xa5\xc9\x25\x0a\xd5\x5c\xd5\xd5\xba\x0a\x45\x89\x79\xe9\xa9\x0a\x7a\x6e\x99\xa9\x39\x29\xc5\x20\xe5\x9c\xc8\x4a\xc1\x86\x81\xf4\x03\xd9\x50\x07\x38\xe7\xe7\xc0\x4c\x06\xe9\x4f\xcd\x4b\x01\x31\x6b\xb9\x00\x01\x00\x00\xff\xff\x3d\x51\xa0\x03\xa0\x00\x00\x00")

func templateStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateStructTmpl,
		"template/struct.tmpl",
	)
}

func templateStructTmpl() (*asset, error) {
	bytes, err := templateStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/struct.tmpl", size: 160, mode: os.FileMode(420), modTime: time.Unix(1468645635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/method.tmpl": templateMethodTmpl,
	"template/struct.tmpl": templateStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"method.tmpl": &bintree{templateMethodTmpl, map[string]*bintree{}},
		"struct.tmpl": &bintree{templateStructTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

